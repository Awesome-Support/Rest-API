{
  "_args": [
    [
      {
        "raw": "grunt-checktextdomain@~1.0.0",
        "scope": null,
        "escapedName": "grunt-checktextdomain",
        "name": "grunt-checktextdomain",
        "rawSpec": "~1.0.0",
        "spec": ">=1.0.0 <1.1.0",
        "type": "range"
      },
      "/srv/www/rcp/htdocs/wp-content/plugins/rcp-avatax"
    ]
  ],
  "_from": "grunt-checktextdomain@>=1.0.0 <1.1.0",
  "_id": "grunt-checktextdomain@1.0.1",
  "_inCache": true,
  "_location": "/grunt-checktextdomain",
  "_nodeVersion": "0.10.25",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/grunt-checktextdomain-1.0.1.tgz_1466465103283_0.9972047759220004"
  },
  "_npmUser": {
    "name": "stephenharris",
    "email": "contact@stephenharris.info"
  },
  "_npmVersion": "3.8.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "grunt-checktextdomain@~1.0.0",
    "scope": null,
    "escapedName": "grunt-checktextdomain",
    "name": "grunt-checktextdomain",
    "rawSpec": "~1.0.0",
    "spec": ">=1.0.0 <1.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/grunt-checktextdomain/-/grunt-checktextdomain-1.0.1.tgz",
  "_shasum": "b254d01e1de913005d4db1c5303d9023b983e19b",
  "_shrinkwrap": null,
  "_spec": "grunt-checktextdomain@~1.0.0",
  "_where": "/srv/www/rcp/htdocs/wp-content/plugins/rcp-avatax",
  "author": {
    "name": "Stephen Harris",
    "email": "contact@stephenharris.info"
  },
  "bugs": {
    "url": "https://github.com/stephenharris/grunt-checktextdomain/issues"
  },
  "dependencies": {
    "chalk": "~0.2.1",
    "text-table": "~0.2.0"
  },
  "description": "Checks gettext function calls for missing or incorrect text domain.",
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.0",
    "grunt-contrib-nodeunit": "~0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "b254d01e1de913005d4db1c5303d9023b983e19b",
    "tarball": "https://registry.npmjs.org/grunt-checktextdomain/-/grunt-checktextdomain-1.0.1.tgz"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "gitHead": "77bdc82272f0218418b2913aef3b04f9f03dd199",
  "homepage": "https://github.com/stephenharris/grunt-checktextdomain",
  "keywords": [
    "gruntplugin",
    "i18n",
    "gettext",
    "wordpress"
  ],
  "licenses": [
    {
      "type": "GPL",
      "url": "https://github.com/stephenharris/grunt-checktextdomain/blob/master/LICENSE-GPL"
    }
  ],
  "main": "Gruntfile.js",
  "maintainers": [
    {
      "name": "stephenharris",
      "email": "contact@stephenharris.info"
    }
  ],
  "name": "grunt-checktextdomain",
  "optionalDependencies": {},
  "peerDependencies": {
    "grunt": ">=0.4.1"
  },
  "readme": "# grunt-checktextdomain\n\n> Check your code for missing or incorrect text-domain in gettext functions\n\nWhile this plug-in was created for development of WordPress plug-ins & themes it should work well with any php-written code base. While the functions normally meant by *gettext functions* (e.g. the native `gettext()`, `ngettext()`) do not allow you to pass a text domain, some platforms - such as WordPress - provide functions which do (.e.g `__()`, `_n()`). This plug-in is intended for *those* functions: to ensure that a domain is given and that is it matches the desired domain specificed in your `Gruntfile.js`.\n\nThis plug-in was inspired by the command line tool [add-textdomain](http://develop.svn.wordpress.org/trunk/tools/i18n/add-textdomain.php).\n\n## Getting Started\nThis plugin requires Grunt `~0.4.1`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-checktextdomain --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-checktextdomain');\n```\n\n## The \"checktextdomain\" task\n\n### Important: Before you start\n\nFor the task to run you need to specify:\n\n1. **Text domain(s)** - a string or array of valid text domain(s)\n2. **Keywords** - gettext functions, along with a specification indicating where to look for the text domain\n\n\n#### Keyword specifications\nThis task extends the original [keyword specification](http://www.gnu.org/software/gettext/manual/html_node/xgettext-Invocation.html) to indicate where to look for the text domain. The default specification is of the form\n\n``` \n    [function name]:[argument-specifier],[argument-specifier],...\n```\nwhere an argument specificier, `[argument-specifier]`, is of the form\n\n - `[number]` - indicating that this argument is a translatable string\n - `[number]c` - indicating that this argument is a context specifier\n\n\nFor example:\n\n - `gettext` - the translated string is the first argument of `gettext()`\n - `ngettext:1,2` -  the translated strings are arguments 1 and 2 of of `ngettext()`\n - `pgettext:1c,2` -  argument 1 is a context specifier and the translated string is argument 2 of `pgettext()`\n\n\nThis task requires an additional argument specifier (in fact this is the only required one): `[number]d` - indicating that the argument is a domain specifier. For example:\n\n - `__:1,2d` - the translated string is the first argument of `__()` and the domain is the second argument\n - `_n:1,2,4d` -  the translated strings are arguments 1 and 2 of `_n()` and the fourth is the domain specifier.\n - `_nx:1,2,3c,5d` -  the translated strings are arguments 1 and 2 of `_nx()`, the third is a context specifier and the fifth is the domain specifier.\n\n\n#### Example keyword specifications (WordPress)\n\n```\nkeywords: [\n\t'__:1,2d',\n\t'_e:1,2d',\n\t'_x:1,2c,3d',\n\t'esc_html__:1,2d',\n\t'esc_html_e:1,2d',\n\t'esc_html_x:1,2c,3d',\n\t'esc_attr__:1,2d', \n\t'esc_attr_e:1,2d', \n\t'esc_attr_x:1,2c,3d', \n\t'_ex:1,2c,3d',\n\t'_n:1,2,4d', \n\t'_nx:1,2,4c,5d',\n\t'_n_noop:1,2,3d',\n\t'_nx_noop:1,2,3c,4d'\n];\n```\n\n### Overview\nIn your project's Gruntfile, add a section named `checktextdomain` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  checktextdomain: {\n    options: {\n      // Task-specific options go here.\n    },\n    files: {\n      // Files to target go here\n    },\n  },\n})\n```\n\n### Options\n\n#### text_domain\nType: `String`|`Array`\n\nMust be provided. A text domain (or an array of text domains) indicating the domains to check against.\n\n#### keywords\nType: `Array`\n\nAn array of keyword specifications to look for. See above section for details & examples.\n\n#### report_missing\nType: `Bool`\nDefault value: `true`\n\nWhether to report use of keywords without a domain being passed.\n\n#### report_variable_domain\nType: `Bool`\nDefault value: `true`\n\nWhether to report use of keywords with a variable being used as the domain.\n\n#### correct_domain\nType: `Bool`\nDefault value: `false`\n\nWhether to automatically correct incorrect domains. Please note that this does **not** add in missing domains, and can **only** be used when one text domain is supplied. This will also correct instances where a variable, rather than string is used as a text doman, **unless** you set `report_variable_domain` to `false`.\n\n#### create_report_file\nType: `Bool`\nDefault value: `false`\n\nCreate a hidden `.[target].json` file with reported errors.\n\n#### force\n\nType: `Bool`\nDefault value: `false`\n\nSet force to true to report text domain errors but not fail the task\n\n### Usage Examples\n\nThis is a typical set-up for WordPress development. The only thing specific to WordPress here is the keywords list.\n\n```js\n    checktextdomain: {\n\t  standard{\n         options:{\n\t\t\ttext_domain: 'my-domain', //Specify allowed domain(s)\n\t\t\tkeywords: [ //List keyword specifications\n\t\t\t\t'__:1,2d',\n\t\t\t\t'_e:1,2d',\n\t\t\t\t'_x:1,2c,3d',\n\t\t\t\t'esc_html__:1,2d',\n\t\t\t\t'esc_html_e:1,2d',\n\t\t\t\t'esc_html_x:1,2c,3d',\n\t\t\t\t'esc_attr__:1,2d', \n\t\t\t\t'esc_attr_e:1,2d', \n\t\t\t\t'esc_attr_x:1,2c,3d', \n\t\t\t\t'_ex:1,2c,3d',\n\t\t\t\t'_n:1,2,4d', \n\t\t\t\t'_nx:1,2,4c,5d',\n\t\t\t\t'_n_noop:1,2,3d',\n\t\t\t\t'_nx_noop:1,2,3c,4d'\n\t\t\t]\n\t\t},\n\t\tfiles: [{\n\t\t\tsrc: ['**/*.php'], //all php \n\t\t\texpand: true,\n\t\t}],\n\t  }\n    },\n```\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* *1.0.1* - 21st June 2016 - Loose Grunt peer dependency to support Grunt 1.0.0\n* *1.0.0* - **Potential breaking change:** Grunt now aborts on error (`grunt.fail.warn`). Thanks to @alexVauch. [#4](https://github.com/stephenharris/grunt-checktextdomain/pull/4). Added `force` task to configure this behaviour.\n* *0.1.1* - Fix bug where functions are used to pass value to gettext functions.\n* *0.1.0* - Initial release\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stephenharris/grunt-checktextdomain.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "1.0.1"
}
