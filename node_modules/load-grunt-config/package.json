{
  "_args": [
    [
      {
        "raw": "load-grunt-config@0.16.0",
        "scope": null,
        "escapedName": "load-grunt-config",
        "name": "load-grunt-config",
        "rawSpec": "0.16.0",
        "spec": "0.16.0",
        "type": "version"
      },
      "/srv/www/rcp/htdocs/wp-content/plugins/rcp-avatax"
    ]
  ],
  "_from": "load-grunt-config@0.16.0",
  "_id": "load-grunt-config@0.16.0",
  "_inCache": true,
  "_location": "/load-grunt-config",
  "_npmUser": {
    "name": "jga",
    "email": "code@firstandthird.com"
  },
  "_npmVersion": "1.4.28",
  "_phantomChildren": {
    "argparse": "0.1.16",
    "esprima": "1.0.4",
    "inherits": "2.0.3",
    "lru-cache": "2.7.3",
    "sigmund": "1.0.1"
  },
  "_requested": {
    "raw": "load-grunt-config@0.16.0",
    "scope": null,
    "escapedName": "load-grunt-config",
    "name": "load-grunt-config",
    "rawSpec": "0.16.0",
    "spec": "0.16.0",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/load-grunt-config/-/load-grunt-config-0.16.0.tgz",
  "_shasum": "f402749e6dd808772f1ebbbc5231add20f518091",
  "_shrinkwrap": null,
  "_spec": "load-grunt-config@0.16.0",
  "_where": "/srv/www/rcp/htdocs/wp-content/plugins/rcp-avatax",
  "author": {
    "name": "First + Third"
  },
  "bugs": {
    "url": "https://github.com/firstandthird/load-grunt-config/issues"
  },
  "dependencies": {
    "async": "~0.2.10",
    "glob": "~3.2.6",
    "jit-grunt": "~0.8.0",
    "js-yaml": "~3.0.1",
    "load-grunt-tasks": "~0.3.0",
    "lodash-node": "~2.4.1"
  },
  "description": "Grunt plugin that lets you break up your Gruntfile config by task",
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt-gh-pages": "~0.9.0",
    "grunt-ghpage": "~0.2.0",
    "grunt-notify": "~0.2.13",
    "grunt-simple-mocha": "~0.4.0",
    "proxyquire": "^0.5.3",
    "sinon": "^1.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "f402749e6dd808772f1ebbbc5231add20f518091",
    "tarball": "https://registry.npmjs.org/load-grunt-config/-/load-grunt-config-0.16.0.tgz"
  },
  "gitHead": "42d7af036eac9d9b890443c87e886ad02961a165",
  "homepage": "https://github.com/firstandthird/load-grunt-config#readme",
  "keywords": [
    "gruntplugin",
    "yaml",
    "grunt",
    "config"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "jga",
      "email": "me@jga.me"
    }
  ],
  "name": "load-grunt-config",
  "optionalDependencies": {},
  "readme": "#load-grunt-config\n\nload-grunt-config is a Grunt library that allows you to break up your Gruntfile config by task.  For most small projects a single Gruntfile.js is perfect. But as a project grows, the Gruntfile.js can quickly become unmanagable; this is where load-grunt-config comes in handy.  It was heavily inspired by [Thomas Boyt's \"More Maintainable Gruntfiles\"](http://www.thomasboyt.com/2013/09/01/maintainable-grunt.html).\n\n##Features\n\n- Each task has its own config file. Example: jshint.js, mocha.js, etc.\n- Auto load all grunt plugins.  Uses [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks). (Optionally it can use [jit-grunt](https://github.com/shootaroo/jit-grunt))\n- Auto expose package.json (`<%= package.name %>`).\n- Support for YAML files.\n- Support for coffeescript files.\n- Support for returning a function.\n- [Easily register task aliases](#aliases) with `aliases.(js|json|yaml|coffee)`.\n- [Config overrides](#custom-config)\n- [Config grouping](#config-grouping)\n\n##Installation\n\n```bash\nnpm install -D load-grunt-config\n```\n\n##Example\n\nBasic Gruntfile.js\n```javascript\nmodule.exports = function(grunt) {\n\n\trequire('load-grunt-config')(grunt);\n\n};\n```\n\nGruntfile.js with options\n```javascript\nmodule.exports = function(grunt) {\n\tvar path = require('path');\n\n\trequire('load-grunt-config')(grunt, {\n\t\t// path to task.js files, defaults to grunt dir\n\t\tconfigPath: path.join(process.cwd(), 'grunt'),\n\n\t\t// auto grunt.initConfig\n\t\tinit: true,\n\n\t\t// data passed into config.  Can use with <%= test %>\n\t\tdata: {\n\t\t\ttest: false\n\t\t},\n\n\t\t// can optionally pass options to load-grunt-tasks.\n\t\t// If you set to false, it will disable auto loading tasks.\n\t\tloadGruntTasks: {\n\t\t\n\t\t\tpattern: 'grunt-*',\n\t\t\tconfig: require('./package.json'),\n\t\t\tscope: 'devDependencies'\n\t\t},\n\n\t\t//can post process config object before it gets passed to grunt\n\t\tpostProcess: function(config) {},\n\n\t\t//allows to manipulate the config object before it gets merged with the data object\n\t\tpreMerge: function(config, data) {}\n\t});\n\n};\n```\n\nOptionally you can use [jit-grunt](https://github.com/shootaroo/jit-grunt) instead of [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks)\n```javascript\nmodule.exports = function(grunt) {\n\n\trequire('load-grunt-config')(grunt, {\n\t\t// ...\n\t\tjitGrunt: {\n\t\t    // here you can pass options to jit-grunt (or just jitGrunt: true)\n\t\t    staticMappings: {\n\t\t        // here you can specify static mappings, for example:\n\t\t        sprite: 'grunt-spritesmith',\n                hello: 'custom/say-hello.js'\n\t\t    }\n\t\t}\n\t});\n\n};\n```\n\nNote: if you have problems with auto loading of some tasks please check [jit-grunt#static-mappings](https://github.com/shootaroo/jit-grunt#static-mappings)\n\n###Grunt tasks files\n\nHere's what the files in your `grunt/` folder could look like.  You can use either .js, .json, .yaml, or .coffee - whatever you prefer and you can mix and match as you see fit.\n\nExample js file returning an object - `grunt/watch.js`\n```javascript\nmodule.exports = {\n  all: {\n    files: [\n      '<%= jshint.all %>',\n      'grunt/*.yaml'\n    ],\n    tasks: [\n      'default'\n    ]\n  }\n};\n```\n\nExample js file returning a function - `grunt/jshint.js`\n```javascript\nmodule.exports = function (grunt, options) {\n  return {\n    all: [\n      'Gruntfile.js',\n      'grunt/*.js',\n      'lib/*.js',\n      'test/*.js',\n      options.someFile\n    ]\n  };\n};\n```\n\nExample json file - `grunt/clean.json`\n```json\n{\n  \"all\": [\n    \"<%= project.dest %>\",\n    \"target/*.js\"\n  ]\n}\n```\n\nExample yaml file - `grunt/notify.yaml`\n```yaml\ndefault:\n  options:\n    message: 'Default finished'\n```\n\nExample coffee file - `grunt/task.coffee`\n```coffee\nmodule.exports =\n  options:\n    bare: true\n```\n\n###Aliases\n\nIf your `grunt/` folder contains an `aliases.(js|.json|yaml|coffee)` file, `load-grunt-config` will use that to define your tasks aliases (like `grunt.registerTask('default', ['jshint']);`).\n\nThe following examples show the same `aliasses` definition written in various formats\n\nExample yaml file - `grunt/aliases.yaml`\n```yaml\ndefault: []\n\nlint:\n  - 'jshint'\n  - 'csslint'\n  \nbuild:\n  - 'lint'\n  - 'mocha'\n  - 'notify'\n```\n\nExample json file - `grunt/aliases.json`\n```json\n{\n  \"default\": [],\n  \"lint\": [\n    \"jshint\",\n    \"csslint\"\n  ],\n  \"build\": [\n    \"lint\",\n    \"mocha\",\n    \"notify\"\n  ]\n}\n```\n\nExample JavaScript file returning an object - `grunt/aliases.js`\n```javascript\nmodule.exports = {\n  'default': [],\n  'lint': [\n    'jshint',\n    'csslint'\n  ],\n  'build': [\n    'lint',\n    'mocha',\n    'notify'\n  ]\n};\n```\n\nExample JavaScript file returning a function `grunt/aliases.js`\nUseful if there is need to compute something before return.\n\n```javascript\nmodule.exports = function (grunt, options) {\n  // computation...\n  return {\n    'default': [],\n    'lint': [\n      'jshint',\n      'csslint'\n    ],\n    'build': [\n      'lint',\n      'mocha',\n      'notify'\n    ]\n  };\n};\n```\n\nExample coffee file grunt/aliases.coffee\n```coffee\nmodule.exports =\n  default: []\n  lint: [\n    'jshint'\n    'csslint'\n  ]\n  build: [\n    'lint'\n    'mocha'\n    'notify'\n  ]\n```\n\n### Custom Config\n\nThere are certain scenarios where you might have a base config for your team, and you want to be able to override some of the config based on your personal setup.  You can do that with the `overridePath` property.  In this case, the library will merge the two, with the override path taking priority.  For example:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  require('load-grunt-config')(grunt, {\n    configPath: path.join(process.cwd(), 'vendor'),\n    overridePath: path.join(process.cwd(), 'config-'+process.env.USER)\n  });\n\n};\n```\n\n`configPath` and `overridePath` accept single string as well as array of strings.  It means that you can compose config using multiple folders.  For example:\n\n```javascript\nmodule.exports = function(grunt) {\n\n  require('load-grunt-config')(grunt, {\n    configPath: [\n      path.join(process.cwd(), 'vendor'),\n      path.join(process.cwd(), 'base-target')\n    ],\n    overridePath: [\n      path.join(process.cwd(), 'variant-1'),\n      path.join(process.cwd(), 'variant-n')\n    ]\n  });\n\n};\n\n```\n\n### Config Grouping\n\n`load-grunt-config` also supports grouping tasks.  This is handy when you want to group all of your script or css tasks together.  To do that, just add the suffix `-tasks` to your config filename and `load-grunt-config` will treat the filename as the task target and the top level keys as the task names.\n\nHere's an example\n\nFilename: `/config/scripts-tasks.yaml`\n```yaml\njshint:\n  files:\n    - '*.js'\njshint__test:\n  files:\n    - 'test/*.js'\nwatch:\n  files:\n    - '*.js'\n  tasks:\n    - 'scripts'\n```\n\nThis would be the equivalent in your `Gruntfile.js`:\n```javascript\n{\n  jshint: {\n    scripts: {\n      files: [\n        '*.js'\n      ]\n    },\n    scripts_test: {\n      files: [\n        'test/*.js'\n      ]\n    }\n  },\n  watch: {\n    scripts: {\n      files: [\n        '*.js'\n      ],\n      tasks: [\n        'scripts'\n      ]\n    }\n  }\n}\n```\n\n### Debugging\n\nIf you pass the parameter `--config-debug`, `load-grunt-config` will output the whole object it will pass\nto Grunt, which can be useful for debugging purposes or when asking for help.\n\nNote that this won't run grunt at all and no tasks would be run, nor loaded.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/firstandthird/load-grunt-config.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.16.0"
}
